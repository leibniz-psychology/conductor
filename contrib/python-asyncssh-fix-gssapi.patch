diff --git a/asyncssh/gss_unix.py b/asyncssh/gss_unix.py
index 4d6c5a3..205e6ab 100644
--- a/asyncssh/gss_unix.py
+++ b/asyncssh/gss_unix.py
@@ -37,20 +37,21 @@ def _mech_to_oid(mech):
 class _GSSBase:
     """GSS base class"""
 
-    def __init__(self, host, usage):
+    def __init__(self, host):
         if '@' in host:
             self._host = Name(host)
         else:
             self._host = Name('host@' + host, NameType.hostbased_service)
 
-        if usage == 'initiate':
-            self._creds = Credentials(usage=usage)
-        else:
-            self._creds = Credentials(name=self._host, usage=usage)
-
         self._mechs = [_mech_to_oid(mech) for mech in self._creds.mechs]
         self._ctx = None
 
+    @property
+    def _creds(self) -> None:
+        """Abstract method to construct GSS credentials"""
+
+        raise NotImplementedError
+
     def _init_context(self):
         """Abstract method to construct GSS security context"""
 
@@ -125,7 +126,7 @@ class GSSClient(_GSSBase):
     """GSS client"""
 
     def __init__(self, host, delegate_creds):
-        super().__init__(host, 'initiate')
+        super().__init__(host)
 
         flags = set((RequirementFlag.mutual_authentication,
                      RequirementFlag.integrity))
@@ -135,6 +136,12 @@ class GSSClient(_GSSBase):
 
         self._flags = flags
 
+    @property
+    def _creds(self) -> Credentials:
+        """Abstract method to construct GSS credentials"""
+
+        return Credentials(usage='initiate')
+
     def _init_context(self):
         """Construct GSS client security context"""
 
@@ -145,8 +152,11 @@ class GSSClient(_GSSBase):
 class GSSServer(_GSSBase):
     """GSS server"""
 
-    def __init__(self, host):
-        super().__init__(host, 'accept')
+    @property
+    def _creds(self) -> Credentials:
+        """Abstract method to construct GSS credentials"""
+
+        return Credentials(name=self._host, usage='accept')
 
     def _init_context(self):
         """Construct GSS server security context"""
